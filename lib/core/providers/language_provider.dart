import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../services/language_service.dart';

part 'language_provider.g.dart';

/// Supported languages with their metadata
enum AppLanguage {
  english('en', 'English', 'English', 'ðŸ‡ºðŸ‡¸'),
  spanish('es', 'Spanish', 'EspaÃ±ol', 'ðŸ‡ªðŸ‡¸'),
  french('fr', 'French', 'FranÃ§ais', 'ðŸ‡«ðŸ‡·'),
  german('de', 'German', 'Deutsch', 'ðŸ‡©ðŸ‡ª'),
  portuguese('pt', 'Portuguese', 'PortuguÃªs', 'ðŸ‡µðŸ‡¹'),
  chineseSimplified('zh', 'Chinese Simplified', 'ç®€ä½“ä¸­æ–‡', 'ðŸ‡¨ðŸ‡³'),
  japanese('ja', 'Japanese', 'æ—¥æœ¬èªž', 'ðŸ‡¯ðŸ‡µ'),
  korean('ko', 'Korean', 'í•œêµ­ì–´', 'ðŸ‡°ðŸ‡·'),
  arabic('ar', 'Arabic', 'Ø§Ù„Ø¹Ø±Ø¨ÙŠØ©', 'ðŸ‡¸ðŸ‡¦'),
  hindi('hi', 'Hindi', 'à¤¹à¤¿à¤‚à¤¦à¥€', 'ðŸ‡®ðŸ‡³');

  final String code;
  final String englishName;
  final String nativeName;
  final String flag;

  const AppLanguage(this.code, this.englishName, this.nativeName, this.flag);

  /// Get AppLanguage from language code
  static AppLanguage fromCode(String code) {
    return AppLanguage.values.firstWhere(
      (lang) => lang.code == code,
      orElse: () => AppLanguage.english,
    );
  }
}

/// Language state notifier with persistence
@Riverpod(keepAlive: true)
class LanguageNotifier extends _$LanguageNotifier {
  @override
  AppLanguage build() {
    _loadSavedLanguage();
    return AppLanguage.english;
  }

  /// Load saved language from SharedPreferences
  Future<void> _loadSavedLanguage() async {
    final savedCode = await LanguageService.loadLanguage();
    state = AppLanguage.fromCode(savedCode);
  }

  /// Set language and persist to SharedPreferences
  void setLanguage(AppLanguage language) {
    state = language;
    LanguageService.saveLanguage(language.code);
  }

  /// Reset to default language (English)
  void resetToDefault() {
    setLanguage(AppLanguage.english);
  }
}
